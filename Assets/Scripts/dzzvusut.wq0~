using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Game : MonoBehaviour
{
    private static int SCREEN_WIDTH = 64; //-1024 pixels / 16 units (16x16 image)
    private static int SCREEN_HEIGHT = 48; //-768 pixels / 16 units

    public int[] Kill = new int[] { 2, 3 };
    public int Create = 3;
    public float speed = 0.1f;
    public bool Probability_Enabled = false;
    public float ProbabilityCreate = 0.1f;
    public float ProbabilityKill = 0.1f;
    private float timer = 0;
    public Sprite DeathCell, NewCell, StaticCell;
    private SpriteRenderer spriteRenderer;

    Cell[,] grid = new Cell[SCREEN_WIDTH, SCREEN_HEIGHT];

    // Start is called before the first frame update
    void Start()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
        PlaceCells();
    }

    // Update is called once per frame
    void Update()
    {
        if(timer >= speed)
        {
            timer = 0f;
            CountNeighbors();
            if (Probability_Enabled)
            {
                ProbabilisticPopulationControl();
            }
            PopulationControl();
        }
        else
        {
            timer += Time.deltaTime;
        }
        
    }

    void PlaceCells()
    {
        for(int y = 0; y<SCREEN_HEIGHT; y++)
        {
            for(int x = 0; x<SCREEN_WIDTH; x++)
            {
                Cell cell = Instantiate(Resources.Load("Prefabs/Cell", typeof(Cell)), new Vector2(x, y), Quaternion.identity) as Cell;
                grid[x, y] = cell;
                grid[x, y].SetAlive(RandomAliveCell());
            }
        }
    }

    void CountNeighbors()
    {
        for (int y = 0; y < SCREEN_HEIGHT; y++)
        {
            for (int x = 0; x < SCREEN_WIDTH; x++)
            {
                int numNeighbors = 0;

                // First check for out of bounds condition, if not out of bounds then execute 

                // North
                if(y+1 < SCREEN_HEIGHT)
                {
                    if (grid[x,y+1].isAlive)
                    {
                        numNeighbors++;
                    }
                }

                // South
                if (y - 1 >= 0)
                {
                    if (grid[x, y - 1].isAlive)
                    {
                        numNeighbors++;
                    }
                }

                // East
                if (x+1 < SCREEN_WIDTH)
                {
                    if(grid[x+1,y].isAlive)
                    {
                        numNeighbors++;
                    }
                }

                // West
                if (x - 1 >= 0)
                {
                    if (grid[x - 1, y].isAlive)
                    {
                        numNeighbors++;
                    }
                }

                // North East
                if (x + 1 < SCREEN_WIDTH && y+1 < SCREEN_HEIGHT)
                {
                    if (grid[x + 1, y + 1].isAlive)
                    {
                        numNeighbors++;
                    }
                }

                // North West
                if (x - 1 >= 0 && y + 1 < SCREEN_HEIGHT)
                {
                    if (grid[x - 1, y + 1].isAlive)
                    {
                        numNeighbors++;
                    }
                }

                // South East
                if (y - 1 >= 0 && x + 1 < SCREEN_WIDTH)
                {
                    if (grid[x + 1, y - 1].isAlive)
                    {
                        numNeighbors++;
                    }
                }

                // South West
                if (y - 1 >= 0 && x - 1 >= 0)
                {
                    if (grid[x - 1, y - 1].isAlive)
                    {
                        numNeighbors++;
                    }
                }

                grid[x, y].numNeighbors = numNeighbors;
            }
        }
    }


    void PopulationControl()
    {
        for (int y = 0; y < SCREEN_HEIGHT; y++)
        {
            for (int x = 0; x < SCREEN_WIDTH; x++)
            {
                // - Rules
                // - Any live cell with 2 or 3 live neighbours survives
                // - Any dead cells with 3 live neighbors become a live cell
                // - All other live cells die in the next generation and all other dead cells stay dead

                // Alive cell
                if (grid[x,y].isAlive)
                {
                    
                    if(grid[x,y].numNeighbors == Kill[0] || grid[x, y].numNeighbors == Kill[1])
                    {
                        grid[x, y].gameObject.GetComponent<SpriteRenderer>().sprite = StaticCell;
                    }
                    
                    if(grid[x,y].numNeighbors != Kill[0] && grid[x, y].numNeighbors != Kill[1])
                    {
                        grid[x, y].gameObject.GetComponent<SpriteRenderer>().sprite = DeathCell;
                        grid[x, y].SetAlive(false); 
                    }
                }
                // Dead cell
                else
                {
                    
                    if (grid[x, y].numNeighbors == Create)
                    {
                        grid[x, y].gameObject.GetComponent<SpriteRenderer>().sprite = NewCell;
                        grid[x, y].SetAlive(true);
                        
                    }
                }
            }
        }
    }
    void ProbabilisticPopulationControl()
    {
        int rand = UnityEngine.Random.Range(0, 100);
        for (int y = 0; y < SCREEN_HEIGHT; y++)
        {
            for (int x = 0; x < SCREEN_WIDTH; x++)
            {
                // - Rules
                // - Any live cell with 2 or 3 live neighbours survives
                // - Any dead cells with 3 live neighbors become a live cell
                // - All other live cells die in the next generation and all other dead cells stay dead
                if (grid[x, y].isAlive)
                {
                    // Alive cell
                    if (grid[x, y].numNeighbors != Kill[0] && grid[x, y].numNeighbors != Kill[1])
                    {
                        if(rand <= ProbabilityKill*10)
                        {
                            grid[x, y].SetAlive(false);
                        }
                        
                        //gameObject.GetComponent<SpriteRenderer>().sprite = Resources.Load("Prefabs/Cell", typeof(Cell))
                    }
                }
                else
                {
                    // Dead cell
                    if (grid[x, y].numNeighbors == Create)
                    {
                        if (rand <= ProbabilityCreate * 10)
                        {
                            grid[x, y].SetAlive(true);
                        }
                    }

                }
            }
        }
    }
    // Randomly determine which cells are alive or not when creating the board
    bool RandomAliveCell()
    {
        int rand = UnityEngine.Random.Range(0, 100);

        if (rand > 75)
        {
            return true;
        }

        return false;
        
    }
}
